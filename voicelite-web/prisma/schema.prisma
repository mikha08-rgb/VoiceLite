// Prisma schema for VoiceLite auth + licensing
// Datasource uses Supabase Postgres via pooled connection string.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LicenseType {
  SUBSCRIPTION
  LIFETIME
}

enum LicenseStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum LicenseActivationStatus {
  ACTIVE
  BLOCKED
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sessions     Session[]
  magicLinks   MagicLinkToken[]
  licenses     License[]
  purchases    Purchase[]
  apiKeys      ApiKey[]
  feedback     Feedback[]
  activities   UserActivity[]
}

model MagicLinkToken {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash   String    @unique
  otpHash     String
  expiresAt   DateTime
  consumedAt  DateTime?
  redirectUri String?
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@index([consumedAt]) // For cleanup queries
}

model Session {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionHash String    @unique
  jwtId       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  revokedAt   DateTime?
  userAgent   String?
  ipAddress   String?

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt]) // For session validation queries
}

model License {
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseKey            String    @unique
  type                  LicenseType
  status                LicenseStatus @default(ACTIVE)
  stripeCustomerId      String?
  stripeSubscriptionId  String?   @unique
  stripePaymentIntentId String?   @unique
  activatedAt           DateTime?
  expiresAt             DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  activations           LicenseActivation[]
  events                LicenseEvent[]

  @@index([userId])
  @@index([stripeCustomerId])
}

model LicenseActivation {
  id              String                  @id @default(cuid())
  licenseId       String
  license         License                 @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  machineId       String
  machineLabel    String?
  machineHash     String?
  activatedAt     DateTime                @default(now())
  lastValidatedAt DateTime?
  status          LicenseActivationStatus @default(ACTIVE)

  @@unique([licenseId, machineId])
  @@index([licenseId])
  @@index([status]) // For activation counting queries
  @@index([machineHash]) // For duplicate machine detection
}

model Product {
  id           String     @id
  name         String
  plan         String     // "pro" | "lifetime"
  seatsDefault Int        @default(1)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  purchases    Purchase[]
}

model Purchase {
  id                   String    @id @default(cuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId            String
  product              Product   @relation(fields: [productId], references: [id])
  stripeCustomerId     String?
  stripeSubscriptionId String?   @unique
  status               String    @default("active") // "active" | "canceled" | "refunded"
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
}

model LicenseEvent {
  id        String   @id @default(cuid())
  licenseId String
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  type      String   // "issued" | "renewed" | "revoked" | "activated" | "deactivated"
  metadata  String?  // JSON
  createdAt DateTime @default(now())

  @@index([licenseId])
  @@index([createdAt])
}

model WebhookEvent {
  eventId String   @id
  seenAt  DateTime @default(now())

  @@index([seenAt])
}

model ApiKey {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String    @unique
  scopes     String    // JSON array
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?

  @@index([userId])
}

enum FeedbackType {
  BUG
  FEATURE_REQUEST
  GENERAL
  QUESTION
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Feedback {
  id        String           @id @default(cuid())
  userId    String?
  user      User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  email     String?
  type      FeedbackType     @default(GENERAL)
  subject   String
  message   String
  metadata  String?          // JSON - browser, OS, version, etc.
  status    FeedbackStatus   @default(OPEN)
  priority  FeedbackPriority @default(MEDIUM)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum ActivityType {
  USER_REGISTERED
  USER_LOGIN
  USER_LOGOUT
  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
  LICENSE_ISSUED
  LICENSE_ACTIVATED
  LICENSE_DEACTIVATED
  LICENSE_RENEWED
  FEEDBACK_SUBMITTED
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String?
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  activityType ActivityType
  metadata     String?      // JSON - additional context
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime     @default(now())

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
}

// Analytics event types for anonymous usage tracking
enum AnalyticsEventType {
  APP_LAUNCHED
  TRANSCRIPTION_COMPLETED
  MODEL_CHANGED
  SETTINGS_CHANGED
  ERROR_OCCURRED
  PRO_UPGRADE
}

// Tier types for analytics segmentation
enum TierType {
  FREE
  PRO
}

// Anonymous analytics events (privacy-first, opt-in)
model AnalyticsEvent {
  id              String               @id @default(cuid())
  anonymousUserId String               // SHA256 hash, no PII
  eventType       AnalyticsEventType
  tier            TierType             @default(FREE)
  appVersion      String?              // e.g., "1.0.16"
  osVersion       String?              // e.g., "Windows 11"
  modelUsed       String?              // e.g., "ggml-small.bin"
  metadata        String?              // JSON - additional event-specific data
  ipAddress       String?              // Optional, for geo analytics only
  createdAt       DateTime             @default(now())

  @@index([anonymousUserId])
  @@index([eventType])
  @@index([createdAt])
  @@index([tier])
  @@index([appVersion])
}
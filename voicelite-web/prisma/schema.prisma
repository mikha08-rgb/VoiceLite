// Simplified Prisma schema for VoiceLite - No auth, just licensing
// Uses email directly, no User accounts

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL") // For migrations, bypasses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

// Simplified enums - only LIFETIME type now
enum LicenseType {
  LIFETIME
}

enum LicenseStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

// Main License model - stores email directly, no User relation
model License {
  id                    String    @id @default(cuid())
  email                 String    // Direct email, no User table needed
  licenseKey            String    @unique
  type                  LicenseType @default(LIFETIME)
  status                LicenseStatus @default(ACTIVE)
  stripeCustomerId      String?
  stripePaymentIntentId String?   @unique
  maxDevices            Int       @default(3) // Device limit for piracy prevention
  emailSent             Boolean   @default(false) // Track if license email was successfully sent
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  activations           LicenseActivation[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([email, status]) // Composite index for common query pattern
  @@index([stripePaymentIntentId]) // Index for webhook lookups
  @@index([emailSent]) // Index for admin queries to find failed email sends
}

// Device activation tracking
model LicenseActivation {
  id              String    @id @default(cuid())
  licenseId       String
  license         License   @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  machineId       String    // Hardware fingerprint (CPU + Motherboard)
  machineLabel    String?   // e.g., "John's PC"
  activatedAt     DateTime  @default(now())
  lastValidatedAt DateTime? // Last time app checked in

  @@unique([licenseId, machineId]) // One activation per device
  @@index([licenseId])
  @@index([machineId]) // Index for machine lookups
}

// Webhook event idempotency tracking
model WebhookEvent {
  eventId String   @id       // Stripe event ID
  seenAt  DateTime @default(now())

  @@index([seenAt])
}

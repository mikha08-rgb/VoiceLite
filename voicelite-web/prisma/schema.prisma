// Prisma schema for VoiceLite licensing (simplified - removed auth, analytics, unused models)
// Datasource uses Supabase Postgres via pooled connection string.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum LicenseType {
  SUBSCRIPTION
  LIFETIME
}

enum LicenseStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum LicenseActivationStatus {
  ACTIVE
  BLOCKED
}

// Core licensing model - stores license keys from Stripe purchases
model License {
  id                    String    @id @default(cuid())
  email                 String    // Customer email (no auth/user table needed)
  licenseKey            String    @unique
  type                  LicenseType
  status                LicenseStatus @default(ACTIVE)
  stripeCustomerId      String?
  stripeSubscriptionId  String?   @unique
  stripePaymentIntentId String?   @unique
  activatedAt           DateTime?
  expiresAt             DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  activations           LicenseActivation[]
  events                LicenseEvent[]

  @@index([email])
  @@index([stripeCustomerId])
}

// License activations - tracks 3-device limit per license
model LicenseActivation {
  id              String                  @id @default(cuid())
  licenseId       String
  license         License                 @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  machineId       String
  machineLabel    String?
  machineHash     String?
  activatedAt     DateTime                @default(now())
  lastValidatedAt DateTime?
  status          LicenseActivationStatus @default(ACTIVE)

  @@unique([licenseId, machineId])
  @@index([licenseId])
  @@index([status]) // For activation counting queries
  @@index([machineHash]) // For duplicate machine detection
}

// License event audit trail
model LicenseEvent {
  id        String   @id @default(cuid())
  licenseId String
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  type      String   // "issued" | "renewed" | "revoked" | "activated" | "deactivated"
  metadata  String?  // JSON
  createdAt DateTime @default(now())

  @@index([licenseId])
  @@index([createdAt])
}

// Webhook event deduplication for Stripe webhooks
model WebhookEvent {
  eventId String   @id
  seenAt  DateTime @default(now())

  @@index([seenAt])
}

// Feedback submission enums
enum FeedbackType {
  BUG
  FEATURE_REQUEST
  GENERAL
  QUESTION
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Feedback - optional, for user feedback collection
model Feedback {
  id        String           @id @default(cuid())
  email     String?
  type      FeedbackType     @default(GENERAL)
  subject   String
  message   String
  metadata  String?          // JSON - browser, OS, version, etc.
  status    FeedbackStatus   @default(OPEN)
  priority  FeedbackPriority @default(MEDIUM)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([status])
  @@index([createdAt])
}

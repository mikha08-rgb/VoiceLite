using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using VoiceLite.Models;
using VoiceLite.Services;
using VoiceLite.Interfaces;
using VoiceLite.Utilities;
using VoiceLite.UI;
using System.Text.Json;

namespace VoiceLite
{
    public partial class MainWindow : Window
    {
        private AudioRecorder? audioRecorder;
        private ITranscriber? whisperService;
        private HotkeyManager? hotkeyManager;
        private TextInjector? textInjector;
        private SystemTrayManager? systemTrayManager;
        private Settings settings = new();
        private bool _isRecording = false;
        private bool isRecording
        {
            get => _isRecording;
            set
            {
                if (_isRecording != value)
                {
                    ErrorLogger.LogMessage($"isRecording state change: {_isRecording} -> {value}");
                    _isRecording = value;
                    UpdateVisualState();
                }
            }
        }
        private bool isHotkeyMode = false;
        private readonly object recordingLock = new object();
        private DateTime lastClickTime = DateTime.MinValue;
        private VisualStateManager? visualStateManager;

        public MainWindow()
        {
            InitializeComponent();
            InitializeVisualStateManager();
            LoadSettings();
            InitializeServices();
            this.Loaded += MainWindow_Loaded;
            this.Closing += MainWindow_Closing;
        }

        private void InitializeVisualStateManager()
        {
            // Initialize the visual state manager after the UI is loaded
            this.Loaded += (s, e) =>
            {
                visualStateManager = new VisualStateManager(StatusIndicator, StatusText, this);
                visualStateManager.UpdateRecordingState(RecordingState.Ready, "Ready");
            };
        }

        private void LoadSettings()
        {
            settings = new Settings();
            try
            {
                string settingsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "settings.json");
                if (File.Exists(settingsPath))
                {
                    string json = File.ReadAllText(settingsPath);
                    settings = JsonSerializer.Deserialize<Settings>(json) ?? new Settings();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load settings: {ex.Message}", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                settings = new Settings();
            }

            MinimizeCheckBox.IsChecked = settings.MinimizeToTray;
            UpdateConfigDisplay();
        }

        private void SaveSettings()
        {
            try
            {
                settings.MinimizeToTray = MinimizeCheckBox.IsChecked == true;
                string settingsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "settings.json");
                string json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(settingsPath, json);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to save settings: {ex.Message}", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void InitializeServices()
        {
            try
            {
                // Check for microphone first
                if (!AudioRecorder.HasAnyMicrophone())
                {
                    MessageBox.Show("No microphone detected!\n\nPlease connect a microphone and restart the application.",
                        "No Microphone", MessageBoxButton.OK, MessageBoxImage.Warning);
                    visualStateManager?.UpdateRecordingState(RecordingState.Error, "No microphone detected");
                    TestButton.IsEnabled = false;
                    return;
                }

                audioRecorder = new AudioRecorder();

                // Set the selected microphone if configured
                if (settings.SelectedMicrophoneIndex >= 0)
                {
                    audioRecorder.SetDevice(settings.SelectedMicrophoneIndex);
                }

                audioRecorder.AudioFileReady += OnAudioFileReady;

                // Use persistent Whisper service for better performance
                whisperService = new PersistentWhisperService(settings);
                textInjector = new TextInjector();
                hotkeyManager = new HotkeyManager();

                hotkeyManager.HotkeyPressed += OnHotkeyPressed;
                hotkeyManager.HotkeyReleased += OnHotkeyReleased;

                systemTrayManager = new SystemTrayManager(this);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to initialize: {ex.Message}",
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Initialization failed");
            }
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                var helper = new WindowInteropHelper(this);
                hotkeyManager?.RegisterHotkey(helper.Handle, settings.RecordHotkey, settings.HotkeyModifiers);

                string hotkeyDisplay = GetHotkeyDisplayString();
                UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");
                TestButton.Content = $"Test Recording (Click or Press {hotkeyDisplay})";
                UpdateConfigDisplay();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to register hotkey: {ex.Message}\n\nThe hotkey may be in use by another application.",
                    "Hotkey Registration Failed", MessageBoxButton.OK, MessageBoxImage.Warning);
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Hotkey registration failed");
            }
        }

        private string GetHotkeyDisplayString()
        {
            return HotkeyDisplayHelper.Format(settings.RecordHotkey, settings.HotkeyModifiers);
        }

        private void UpdateConfigDisplay()
        {
            // Update hotkey display
            HotkeyText.Text = GetHotkeyDisplayString();

            // Update microphone display
            if (settings.SelectedMicrophoneIndex == -1)
            {
                MicrophoneText.Text = "Default";
            }
            else if (!string.IsNullOrEmpty(settings.SelectedMicrophoneName))
            {
                // Truncate long microphone names
                string micName = settings.SelectedMicrophoneName;
                if (micName.Length > 25)
                {
                    micName = micName.Substring(0, 22) + "...";
                }
                MicrophoneText.Text = micName;
            }
            else
            {
                MicrophoneText.Text = "Microphone " + settings.SelectedMicrophoneIndex;
            }
        }

        private void UpdateVisualState()
        {
            if (visualStateManager == null) return;

            if (isRecording)
            {
                visualStateManager.UpdateRecordingState(RecordingState.Recording, "Recording...");
            }
            else
            {
                visualStateManager.UpdateRecordingState(RecordingState.Ready, "Ready");
            }
        }

        private void UpdateTranscriptionText(string text, bool isTemporary = false)
        {
            visualStateManager?.AnimateContentChange(TranscriptionText, () =>
            {
                TranscriptionText.Text = text;
            });

            if (isTemporary)
            {
                // Reset to ready state after 3 seconds
                Task.Delay(3000).ContinueWith(_ => Dispatcher.Invoke(() =>
                {
                    if (!isRecording)
                    {
                        string hotkeyDisplay = GetHotkeyDisplayString();
                        UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");
                    }
                }));
            }
        }

        private void TestButton_Click(object sender, RoutedEventArgs e)
        {
            ErrorLogger.LogMessage($"TestButton_Click: Entry - isRecording={isRecording}, isHotkeyMode={isHotkeyMode}");

            // Prevent rapid clicking (debounce to 300ms)
            var now = DateTime.Now;
            if ((now - lastClickTime).TotalMilliseconds < 300)
            {
                ErrorLogger.LogMessage("TestButton_Click: Debounced - too rapid clicking");
                return;
            }
            lastClickTime = now;

            if (audioRecorder == null)
            {
                ErrorLogger.LogMessage("TestButton_Click: AudioRecorder is null");
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Audio recorder not initialized");
                return;
            }

            lock (recordingLock)
            {
                ErrorLogger.LogMessage($"TestButton_Click: Inside lock - isRecording={isRecording}");
                if (!isRecording)
                {
                    ErrorLogger.LogMessage("TestButton_Click: Calling StartRecording()");
                    StartRecording();
                }
                else
                {
                    ErrorLogger.LogMessage("TestButton_Click: Calling StopRecording()");
                    StopRecording();
                }
            }
        }

        private void StartRecording()
        {
            ErrorLogger.LogMessage($"StartRecording: Entry - isRecording={isRecording}");

            if (isRecording)
            {
                ErrorLogger.LogMessage("StartRecording: Already recording, returning early");
                return;
            }

            try
            {
                ErrorLogger.LogMessage("StartRecording: Setting isRecording=true and starting audio recorder");
                isRecording = true;

                audioRecorder?.StartRecording();

                ErrorLogger.LogMessage("StartRecording: AudioRecorder started successfully, updating UI");
                TestButton.Content = "Stop Recording (Click again or release hotkey)";
                UpdateTranscriptionText("Recording in progress...");
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("No microphone"))
            {
                ErrorLogger.LogMessage($"StartRecording: No microphone exception - {ex.Message}");
                isRecording = false;
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "No microphone detected");

                string hotkeyDisplay = GetHotkeyDisplayString();
                UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");

                MessageBox.Show(ex.Message, "No Microphone", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("Failed to access"))
            {
                ErrorLogger.LogMessage($"StartRecording: Microphone access exception - {ex.Message}");
                isRecording = false;
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Microphone busy");

                string hotkeyDisplay = GetHotkeyDisplayString();
                UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");

                MessageBox.Show(ex.Message, "Microphone Access Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            catch (Exception ex)
            {
                ErrorLogger.LogMessage($"StartRecording: General exception - {ex.Message}");
                isRecording = false;
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Recording failed");

                string hotkeyDisplay = GetHotkeyDisplayString();
                UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");

                MessageBox.Show($"Failed to start recording: {ex.Message}",
                    "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void StopRecording()
        {
            ErrorLogger.LogMessage($"StopRecording: Entry - isRecording={isRecording}");

            if (!isRecording)
            {
                ErrorLogger.LogMessage("StopRecording: Not recording, returning early");
                return;
            }

            try
            {
                ErrorLogger.LogMessage("StopRecording: Calling audioRecorder.StopRecording()");
                audioRecorder?.StopRecording();

                ErrorLogger.LogMessage("StopRecording: Setting isRecording=false");
                isRecording = false;

                ErrorLogger.LogMessage("StopRecording: Updating UI to processing state");
                visualStateManager?.UpdateRecordingState(RecordingState.Processing, "Processing...");
                TestButton.Content = "Test Recording (Click or Press hotkey)";
                UpdateTranscriptionText("Processing audio...");
            }
            catch (Exception ex)
            {
                ErrorLogger.LogMessage($"StopRecording: Exception during stop - {ex.Message}");
                isRecording = false;
                visualStateManager?.UpdateRecordingState(RecordingState.Error, "Error stopping");

                string hotkeyDisplay = GetHotkeyDisplayString();
                UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");

                ErrorLogger.LogError("StopRecording", ex);
            }
        }

        private void OnHotkeyPressed(object? sender, EventArgs e)
        {
            lock (recordingLock)
            {
                if (!isRecording)
                {
                    isHotkeyMode = true;

                    // Immediate audio feedback
                    if (settings.PlaySoundFeedback)
                    {
                        System.Media.SystemSounds.Beep.Play();
                    }

                    StartRecording();
                }
            }
        }

        private void OnHotkeyReleased(object? sender, EventArgs e)
        {
            lock (recordingLock)
            {
                if (isRecording && isHotkeyMode)
                {
                    // Play sound feedback when stopping recording
                    if (settings.PlaySoundFeedback)
                    {
                        System.Media.SystemSounds.Asterisk.Play();
                    }

                    StopRecording();
                }
            }
        }

        private async void OnAudioFileReady(object? sender, string audioFilePath)
        {
            ErrorLogger.LogMessage($"OnAudioFileReady: Entry - file={audioFilePath}");

            string workingAudioPath = audioFilePath;
            bool createdCopy = false;

            try
            {
                if (File.Exists(audioFilePath))
                {
                    var audioDirectory = Path.GetDirectoryName(audioFilePath);
                    if (!string.IsNullOrEmpty(audioDirectory))
                    {
                        var uniqueFileName = $"audio_{DateTime.UtcNow:yyyyMMddHHmmssfff}_{Guid.NewGuid():N}.wav";
                        var tempCopyPath = Path.Combine(audioDirectory, uniqueFileName);
                        File.Copy(audioFilePath, tempCopyPath);
                        workingAudioPath = tempCopyPath;
                        createdCopy = true;
                    }
                }
            }
            catch (Exception copyEx)
            {
                ErrorLogger.LogError("OnAudioFileReady.CopyAudio", copyEx);
                workingAudioPath = audioFilePath;
            }

            // Update UI immediately on UI thread
            Dispatcher.Invoke(() => visualStateManager?.UpdateRecordingState(RecordingState.Processing, "Transcribing..."));

            try
            {
                if (whisperService != null)
                {
                    // Run transcription on background thread
                    var transcription = await Task.Run(async () =>
                        await whisperService.TranscribeAsync(workingAudioPath));

                    ErrorLogger.LogMessage($"Transcription result: '{transcription?.Substring(0, Math.Min(transcription?.Length ?? 0, 50))}'...");

                    // Update UI on UI thread after transcription completes
                    await Dispatcher.InvokeAsync(() =>
                    {
                        if (!string.IsNullOrWhiteSpace(transcription))
                        {
                            UpdateTranscriptionText(transcription, true);
                        }
                        else
                        {
                            UpdateTranscriptionText("(No speech detected)", true);
                        }
                    });

                    // Handle text injection on background thread if we have text
                    if (!string.IsNullOrWhiteSpace(transcription) && textInjector != null)
                    {
                        textInjector.AutoPaste = settings.AutoPaste;

                        if (settings.AutoPaste)
                        {
                            ErrorLogger.LogMessage("Auto-pasting text via Ctrl+V simulation");
                            Dispatcher.Invoke(() => visualStateManager?.UpdateRecordingState(RecordingState.Processing, "Pasting..."));
                        }
                        else
                        {
                            ErrorLogger.LogMessage("Copying text to clipboard (manual paste required)");
                            Dispatcher.Invoke(() => visualStateManager?.UpdateRecordingState(RecordingState.Processing, "Copied to clipboard"));
                        }

                        // Run text injection on background thread
                        await Task.Run(() => textInjector.InjectText(transcription));
                    }

                    // Final UI update with thread-safe state reset
                    Dispatcher.Invoke(() =>
                    {
                        visualStateManager?.UpdateRecordingState(RecordingState.Ready, "Ready");

                        // Thread-safe reset of recording state
                        lock (recordingLock)
                        {
                            isRecording = false;
                            isHotkeyMode = false;
                        }
                    });
                }
                else
                {
                    Dispatcher.Invoke(() =>
                    {
                        UpdateTranscriptionText("Whisper service not initialized", true);
                        visualStateManager?.UpdateRecordingState(RecordingState.Error, "Whisper service error");

                        lock (recordingLock)
                        {
                            isRecording = false;
                            isHotkeyMode = false;
                        }
                    });
                }
            }
            catch (Exception ex)
            {
                ErrorLogger.LogError("OnAudioFileReady", ex);
                Dispatcher.Invoke(() =>
                {
                    UpdateTranscriptionText($"Transcription error: {ex.Message}", true);
                    visualStateManager?.UpdateRecordingState(RecordingState.Error, "Transcription failed");

                    lock (recordingLock)
                    {
                        isRecording = false;
                        isHotkeyMode = false;
                    }
                });
            }
            finally
            {
                if (createdCopy && workingAudioPath != audioFilePath)
                {
                    try
                    {
                        File.Delete(workingAudioPath);
                    }
                    catch (Exception deleteEx)
                    {
                        ErrorLogger.LogError("OnAudioFileReady.CleanupTempAudio", deleteEx);
                    }
                }
            }
        }

        private void Window_StateChanged(object sender, EventArgs e)
        {
            if (WindowState == WindowState.Minimized)
            {
                systemTrayManager?.MinimizeToTray();
            }
        }

        private void MainWindow_Closing(object? sender, System.ComponentModel.CancelEventArgs e)
        {
            if (MinimizeCheckBox.IsChecked == true)
            {
                e.Cancel = true;
                systemTrayManager?.MinimizeToTray();
            }
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            var settingsWindow = new SettingsWindow(settings);
            settingsWindow.Owner = this;

            if (settingsWindow.ShowDialog() == true)
            {
                settings = settingsWindow.Settings;
                MinimizeCheckBox.IsChecked = settings.MinimizeToTray;
                SaveSettings();

                whisperService?.Dispose();
                whisperService = new WhisperService(settings);

                // Apply microphone selection
                if (audioRecorder != null && settings.SelectedMicrophoneIndex >= -1)
                {
                    audioRecorder.SetDevice(settings.SelectedMicrophoneIndex);
                }

                // Re-register hotkey with new settings
                try
                {
                    hotkeyManager?.Dispose();
                    hotkeyManager = new HotkeyManager();
                    hotkeyManager.HotkeyPressed += OnHotkeyPressed;
                    hotkeyManager.HotkeyReleased += OnHotkeyReleased;
                    var helper = new WindowInteropHelper(this);
                    hotkeyManager.RegisterHotkey(helper.Handle, settings.RecordHotkey, settings.HotkeyModifiers);

                    string hotkeyDisplay = GetHotkeyDisplayString();
                    UpdateTranscriptionText($"Ready! Press and hold {hotkeyDisplay} to record, release to transcribe and type.");
                    TestButton.Content = $"Test Recording (Click or Press {hotkeyDisplay})";
                    UpdateConfigDisplay();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to apply new hotkey: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    visualStateManager?.UpdateRecordingState(RecordingState.Error, "Hotkey update failed");
                }
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            visualStateManager?.StopAllAnimations();
            SaveSettings();
            audioRecorder?.Dispose();
            whisperService?.Dispose();
            hotkeyManager?.Dispose();
            systemTrayManager?.Dispose();
            base.OnClosed(e);
        }
    }
}
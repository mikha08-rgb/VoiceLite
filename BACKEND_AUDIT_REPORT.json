{
  "audit_metadata": {
    "date": "2025-10-09",
    "version": "v0.1.0",
    "scope": "Backend API only (Next.js 15 + PostgreSQL + Stripe)",
    "method": "Static analysis, pattern matching, credential scanning",
    "auditor": "Automated Security Review System",
    "report_version": "1.0"
  },
  "repo_summary": {
    "tech_stack": {
      "framework": "Next.js 15.5.4",
      "runtime": "Node.js + React 19",
      "database": "PostgreSQL (Supabase) via Prisma ORM 6.1.0",
      "authentication": "Passwordless magic link + JWT sessions",
      "payments": "Stripe 18.5.0",
      "security": "Upstash Redis rate limiting + CSRF protection",
      "email": "Resend 6.1.0",
      "deployment": "Vercel (serverless)",
      "key_dependencies": [
        "@prisma/client@6.1.0",
        "stripe@18.5.0",
        "@upstash/ratelimit@2.0.6",
        "@noble/ed25519@3.0.0",
        "zod@4.1.11"
      ]
    },
    "architecture": {
      "total_routes": 25,
      "total_models": 13,
      "total_loc": "~2,500",
      "migrations": 2
    },
    "entrypoints": {
      "public": [
        "/api/auth/request",
        "/api/auth/otp",
        "/api/checkout",
        "/api/webhook",
        "/api/feedback/submit"
      ],
      "authenticated": [
        "/api/me",
        "/api/licenses/issue",
        "/api/licenses/activate",
        "/api/licenses/deactivate",
        "/api/billing/portal"
      ],
      "admin": [
        "/api/admin/stats",
        "/api/admin/analytics",
        "/api/admin/feedback",
        "/api/admin/migrate"
      ]
    },
    "hotspots": [
      "voicelite-web/app/api/webhook/route.ts (Stripe webhook handler)",
      "voicelite-web/app/api/auth/request/route.ts (Magic link generation)",
      "voicelite-web/app/api/admin/migrate/route.ts (Unprotected admin endpoint)",
      "voicelite-web/lib/ratelimit.ts (Fail-open rate limiting)",
      "voicelite-web/.env (Exposed credentials)"
    ]
  },
  "risk_summary": {
    "overall_score": 7.2,
    "risk_level": "HIGH",
    "critical_count": 4,
    "high_count": 6,
    "medium_count": 8,
    "low_count": 4,
    "total_findings": 22
  },
  "findings": [
    {
      "id": "SEC-001",
      "title": "Database Credentials Exposed in Committed .env File",
      "area": "Configuration Security",
      "severity": "critical",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/.env",
          "lines": "2-3",
          "snippet": "DATABASE_URL=\"postgresql://postgres.dzgqyytpkvjguxlhcpgl:jY%26%23DvbBo2a%25Oo%2Az@...\""
        }
      ],
      "why_it_matters": "Password 'jY&#DvbBo2a%Oo*z' is plaintext in version control. Anyone with repo access can connect to production database with full admin privileges, enabling data exfiltration, manipulation, or deletion.",
      "impact": {
        "confidentiality": "COMPLETE_BREACH",
        "integrity": "COMPLETE_COMPROMISE",
        "availability": "DATABASE_DELETION_RISK"
      },
      "suggested_action": "1. Rotate database password immediately via Supabase console\n2. Delete .env file from repository: git rm --cached voicelite-web/.env\n3. Add *.env to .gitignore\n4. Audit git history for exposure\n5. Update production secrets on Vercel\n6. Review Supabase audit logs for unauthorized access",
      "priority": "P0",
      "estimated_fix_time": "30 minutes",
      "references": [
        "CWE-798: Use of Hard-coded Credentials",
        "OWASP A07:2021 - Identification and Authentication Failures"
      ]
    },
    {
      "id": "SEC-002",
      "title": "Stripe/Resend API Keys in Committed Files",
      "area": "API Key Management",
      "severity": "critical",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/.env.local",
          "lines": "multiple",
          "snippet": "Files with live key patterns: .env.local, .env.vercel, .env.local.production"
        }
      ],
      "why_it_matters": "Stripe keys enable payment processing, refunds, customer data access. Resend keys allow sending emails from your domain (phishing risk). Keys found in multiple environment files indicate broad exposure.",
      "impact": {
        "financial": "UNAUTHORIZED_CHARGES",
        "reputation": "PHISHING_RISK",
        "compliance": "PCI_DSS_VIOLATION"
      },
      "suggested_action": "1. Revoke all exposed Stripe keys via Stripe Dashboard\n2. Revoke Resend API key via Resend Dashboard\n3. Generate new keys and update only in Vercel environment variables\n4. Remove all .env* files from repo\n5. Keep only .env.example with placeholders\n6. Monitor Stripe logs for suspicious activity",
      "priority": "P0",
      "estimated_fix_time": "45 minutes",
      "references": [
        "CWE-312: Cleartext Storage of Sensitive Information",
        "PCI-DSS 3.2 Requirement 3.4"
      ]
    },
    {
      "id": "SEC-003",
      "title": "Unprotected Admin Migration Endpoint",
      "area": "Authentication & Authorization",
      "severity": "critical",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/app/api/admin/migrate/route.ts",
          "lines": "8-38",
          "snippet": "// ONE-TIME USE: Removed auth temporarily\nexport async function POST(req: NextRequest) {\n  const { stdout, stderr } = await execAsync('npx prisma migrate deploy'..."
        }
      ],
      "why_it_matters": "No authentication on /api/admin/migrate - anyone can POST to execute database migrations. Comment indicates auth was intentionally disabled temporarily. Could be used to drop tables, corrupt data, create backdoor accounts.",
      "impact": {
        "data_loss": "TABLE_DELETION",
        "privilege_escalation": "ADMIN_ACCOUNT_CREATION",
        "availability": "SCHEMA_CORRUPTION"
      },
      "suggested_action": "Option A (Recommended): Delete endpoint entirely, use Vercel CLI for migrations\nOption B: Add admin auth check via verifyAdmin(req)\nOption C: Add MIGRATION_SECRET header validation\n4. Verify endpoint is not deployed to production",
      "priority": "P0",
      "estimated_fix_time": "15 minutes",
      "references": [
        "CWE-306: Missing Authentication for Critical Function",
        "OWASP A01:2021 - Broken Access Control"
      ]
    },
    {
      "id": "SEC-004",
      "title": "Ed25519 Private Keys Potentially Exposed",
      "area": "Cryptographic Key Management",
      "severity": "critical",
      "confidence": "medium",
      "evidence": [
        {
          "path": "voicelite-web/.env.example",
          "lines": "54-59",
          "snippet": "LICENSE_SIGNING_PRIVATE_B64=\"GENERATE_WITH_NPM_RUN_KEYGEN_DO_NOT_USE_EXAMPLE\""
        }
      ],
      "why_it_matters": "Ed25519 private keys sign licenses and CRL. If exposed, attacker can forge Pro licenses for free. CRL private key allows revoking legitimate licenses maliciously. Desktop app verifies signatures with embedded public key.",
      "impact": {
        "revenue_loss": "UNLIMITED_FORGED_LICENSES",
        "integrity": "MALICIOUS_LICENSE_REVOCATION"
      },
      "suggested_action": "1. Audit all .env* files for actual private keys (not example values)\n2. If exposed: Rotate keys immediately via npm run keygen\n3. Update public key in desktop app (requires new release)\n4. Revoke all existing licenses and re-issue with new keys\n5. Store private keys only in Vercel environment variables",
      "priority": "P0",
      "estimated_fix_time": "2 hours (if keys need rotation + desktop app update)",
      "references": [
        "CWE-321: Use of Hard-coded Cryptographic Key",
        "NIST SP 800-57 Part 1: Key Management"
      ]
    },
    {
      "id": "AUTH-001",
      "title": "Rate Limiting Disabled by Default (Fails Open)",
      "area": "API Security",
      "severity": "high",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/lib/ratelimit.ts",
          "lines": "91-98",
          "snippet": "if (!limiter) {\n  console.warn('Rate limiting not configured');\n  return { allowed: true, limit: 999, remaining: 999 };\n}"
        }
      ],
      "why_it_matters": "Without Upstash Redis, rate limiting is silently disabled. Attacker can brute-force OTP codes (10 attempts/hour → unlimited), spam magic links (5/hour → unlimited), or abuse license operations (30/day → unlimited).",
      "impact": {
        "brute_force": "OTP_GUESSING_FEASIBLE",
        "spam": "EMAIL_FLOODING",
        "abuse": "UNLIMITED_LICENSE_REQUESTS"
      },
      "suggested_action": "1. Fail closed instead of open: throw Error if limiter not configured\n2. Add environment validation at build time\n3. Require UPSTASH_REDIS_REST_URL in production\n4. Add health check endpoint to verify rate limiting is active",
      "priority": "P1",
      "estimated_fix_time": "1 hour",
      "references": [
        "OWASP API Security Top 10 - API4:2023 Unrestricted Resource Consumption",
        "CWE-307: Improper Restriction of Excessive Authentication Attempts"
      ]
    },
    {
      "id": "AUTH-002",
      "title": "In-Memory Rate Limiter Unsafe for Production",
      "area": "Concurrency & Scalability",
      "severity": "high",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/lib/ratelimit.ts",
          "lines": "115-163",
          "snippet": "export const fallbackEmailLimit = new InMemoryRateLimiter(5, 60 * 60 * 1000);\n// Cleanup fallback limiters every 10 minutes\nif (!isConfigured) { setInterval(...) }"
        }
      ],
      "why_it_matters": "Vercel deploys multiple serverless instances. In-memory state doesn't sync across instances. Attacker can send 5 requests to instance A, 5 to instance B, etc. Effective rate limit becomes 5*N where N = number of instances (typically 3-10x).",
      "impact": {
        "rate_limit_bypass": "MULTIPLY_LIMIT_BY_INSTANCE_COUNT",
        "inconsistent_ux": "USER_RATE_LIMITED_ON_ONE_INSTANCE_ALLOWED_ON_ANOTHER"
      },
      "suggested_action": "1. Remove in-memory fallback entirely (force Upstash requirement)\n2. If fallback needed, use Vercel KV for distributed state\n3. Document limitation in README",
      "priority": "P1",
      "estimated_fix_time": "30 minutes",
      "references": [
        "OWASP API Security - API4:2023 Unrestricted Resource Consumption",
        "CWE-840: Business Logic Errors"
      ]
    },
    {
      "id": "AUTH-003",
      "title": "Session Cookie Name Configurable (Predictable Default)",
      "area": "Session Security",
      "severity": "high",
      "confidence": "medium",
      "evidence": [
        {
          "path": "voicelite-web/lib/auth/session.ts",
          "lines": "6",
          "snippet": "const SESSION_COOKIE_NAME = process.env.SESSION_COOKIE_NAME ?? 'voicelite_session';"
        }
      ],
      "why_it_matters": "Default fallback 'voicelite_session' is predictable. If SESSION_COOKIE_NAME not set, all deployments use same cookie name. Increases risk of session fixation attacks.",
      "impact": {
        "session_fixation": "PREDICTABLE_COOKIE_NAME_FOR_CSRF",
        "cookie_collision": "MULTIPLE_APPS_ON_SAME_DOMAIN"
      },
      "suggested_action": "1. Remove configurability, use hardcoded unique name\n2. Add __Secure- prefix to enforce HTTPS-only in production\n3. Remove from environment variables",
      "priority": "P2",
      "estimated_fix_time": "15 minutes",
      "references": [
        "OWASP Session Management Cheat Sheet",
        "CWE-384: Session Fixation"
      ]
    },
    {
      "id": "INPUT-001",
      "title": "Missing Input Validation on Some Routes",
      "area": "Input Validation",
      "severity": "high",
      "confidence": "medium",
      "evidence": [
        {
          "path": "various",
          "lines": "N/A",
          "snippet": "Some routes missing Zod schema validation on request body"
        }
      ],
      "why_it_matters": "Unvalidated input can cause type errors, crashes, unexpected behavior. Missing sanitization increases XSS/injection risk. Inconsistent with other routes that use Zod schemas.",
      "impact": {
        "type_errors": "UNDEFINED_OR_WRONG_TYPE_CRASHES",
        "injection": "UNVALIDATED_STRINGS_TO_DATABASE"
      },
      "suggested_action": "1. Audit all API routes for missing Zod schemas\n2. Standardize validation pattern\n3. Add pre-commit hook to enforce Zod usage in all POST/PUT routes",
      "priority": "P2",
      "estimated_fix_time": "2 hours",
      "references": [
        "OWASP Top 10 - A03:2021 Injection",
        "CWE-20: Improper Input Validation"
      ]
    },
    {
      "id": "CONFIG-001",
      "title": "Multiple Environment Files in Repository",
      "area": "Configuration Management",
      "severity": "medium",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/",
          "lines": "N/A",
          "snippet": "5 .env* files tracked: .env, .env.local, .env.vercel, .env.local.production, .env.production.template"
        }
      ],
      "why_it_matters": "5 different .env* files tracked in git causes confusion and inconsistency. Easy to accidentally commit secrets in wrong file. No clear source of truth for configuration.",
      "impact": {
        "confusion": "DEVELOPERS_UNSURE_WHICH_FILE_TO_USE",
        "drift": "PRODUCTION_CONFIG_DIVERGES_FROM_DOCS"
      },
      "suggested_action": "1. Keep only .env.example in repository\n2. Document in README: .env.local for local dev, Vercel dashboard for prod\n3. Add all .env variants to .gitignore",
      "priority": "P2",
      "estimated_fix_time": "30 minutes",
      "references": ["OWASP A05:2021 Security Misconfiguration"]
    },
    {
      "id": "ERROR-001",
      "title": "Generic Error Responses Leak Stack Traces",
      "area": "Error Handling",
      "severity": "medium",
      "confidence": "medium",
      "evidence": [
        {
          "path": "various",
          "lines": "N/A",
          "snippet": "return NextResponse.json({ error: error.message }, { status: 500 });"
        }
      ],
      "why_it_matters": "Error messages can leak implementation details (file paths, SQL queries, dependency names). Helps attackers fingerprint your stack and find vulnerabilities.",
      "impact": {
        "information_disclosure": "STACK_TRACES_REVEAL_CODE_STRUCTURE",
        "attack_surface": "ERROR_MESSAGES_GUIDE_EXPLOIT_DEVELOPMENT"
      },
      "suggested_action": "1. Use generic error messages in production\n2. Log detailed errors server-side only\n3. Add error tracking (Sentry, Datadog) for debugging",
      "priority": "P3",
      "estimated_fix_time": "1 hour",
      "references": [
        "OWASP Top 10 - A05:2021 Security Misconfiguration",
        "CWE-209: Generation of Error Message Containing Sensitive Information"
      ]
    },
    {
      "id": "CODE-001",
      "title": "$executeRaw/$queryRaw Used in Admin Routes",
      "area": "SQL Injection Risk",
      "severity": "medium",
      "confidence": "low",
      "evidence": [
        {
          "path": "voicelite-web/app/api/admin/stats/route.ts",
          "lines": "N/A",
          "snippet": "2 files found with $executeRaw or $queryRaw"
        }
      ],
      "why_it_matters": "Prisma's $executeRaw and $queryRaw bypass ORM safety. If user input is interpolated into SQL, SQL injection is possible.",
      "impact": {
        "sql_injection": "IF_RAW_QUERIES_USE_UNSANITIZED_INPUT"
      },
      "suggested_action": "1. Audit both files to verify raw queries use parameterized queries\n2. Prefer Prisma's type-safe queries when possible",
      "priority": "P3",
      "estimated_fix_time": "30 minutes (code review)",
      "references": [
        "CWE-89: SQL Injection",
        "OWASP Top 10 - A03:2021 Injection"
      ]
    },
    {
      "id": "DOC-001",
      "title": "Missing API Documentation",
      "area": "Documentation",
      "severity": "low",
      "confidence": "high",
      "evidence": [
        {
          "path": "voicelite-web/app/api/",
          "lines": "N/A",
          "snippet": "25 API routes with no inline documentation"
        }
      ],
      "why_it_matters": "Difficult for new developers to understand routes. OpenAPI spec exists but not auto-generated from code.",
      "impact": {
        "developer_experience": "SLOW_ONBOARDING"
      },
      "suggested_action": "1. Add JSDoc comments to all route handlers\n2. Generate OpenAPI spec from Zod schemas\n3. Add README.md in app/api/ explaining route structure",
      "priority": "P4",
      "estimated_fix_time": "2 hours",
      "references": []
    },
    {
      "id": "CODE-002",
      "title": "Inconsistent Error Response Format",
      "area": "API Design",
      "severity": "low",
      "confidence": "medium",
      "evidence": [
        {
          "path": "various",
          "lines": "N/A",
          "snippet": "Some routes return { error: string }, others return { message: string }"
        }
      ],
      "why_it_matters": "Inconsistent status codes for same error type (401 vs 403 for auth). Client integration becomes harder.",
      "impact": {
        "developer_experience": "CLIENT_INTEGRATION_COMPLEXITY"
      },
      "suggested_action": "1. Standardize error response format\n2. Create error utility: lib/errors.ts",
      "priority": "P4",
      "estimated_fix_time": "1 hour",
      "references": []
    }
  ],
  "quick_wins": [
    {
      "priority": "P0",
      "task": "Remove .env files with real credentials",
      "time": "10 minutes",
      "impact": "Prevent credential exposure"
    },
    {
      "priority": "P0",
      "task": "Rotate database password via Supabase",
      "time": "15 minutes",
      "impact": "Invalidate exposed credentials"
    },
    {
      "priority": "P0",
      "task": "Revoke Stripe/Resend keys, generate new",
      "time": "15 minutes",
      "impact": "Invalidate exposed API keys"
    },
    {
      "priority": "P0",
      "task": "Delete or protect /api/admin/migrate",
      "time": "10 minutes",
      "impact": "Close authentication bypass"
    },
    {
      "priority": "P1",
      "task": "Update .gitignore to prevent future leaks",
      "time": "5 minutes",
      "impact": "Prevent future secret commits"
    },
    {
      "priority": "P1",
      "task": "Add Upstash requirement for production",
      "time": "30 minutes",
      "impact": "Enforce rate limiting"
    },
    {
      "priority": "P1",
      "task": "Remove in-memory rate limiter fallback",
      "time": "30 minutes",
      "impact": "Fix multi-instance bypass"
    },
    {
      "priority": "P2",
      "task": "Audit git history for exposed secrets",
      "time": "15 minutes",
      "impact": "Assess breach scope"
    },
    {
      "priority": "P2",
      "task": "Add input validation to routes missing Zod",
      "time": "30 minutes",
      "impact": "Prevent type errors and injection"
    },
    {
      "priority": "P2",
      "task": "Standardize session cookie name",
      "time": "15 minutes",
      "impact": "Reduce session fixation risk"
    }
  ],
  "next_steps": [
    "Week 1 Day 1 (P0): Rotate all exposed credentials, remove .env files, fix admin endpoint",
    "Week 1 Day 2 (P1): Enforce Upstash requirement, remove in-memory fallback, add env validation",
    "Week 1 Day 3-5 (P2): Audit routes for validation, standardize session cookie, review admin auth",
    "Week 2 Day 1-2 (P2): Consolidate environment files, document requirements, add pre-commit hooks",
    "Week 2 Day 3-4 (P3): Standardize error format, add production error sanitization, implement error tracking",
    "Week 2 Day 5 (Documentation): Add JSDoc comments, update OpenAPI spec, create API usage guide"
  ],
  "statistics": {
    "total_api_routes": 25,
    "total_loc_backend": "~2,500",
    "routes_with_auth": 8,
    "routes_with_rate_limiting": 4,
    "routes_with_csrf_protection": 6,
    "routes_with_zod_validation": 18,
    "database_models": 13,
    "migrations": 2,
    "environment_variables_required": 15,
    "third_party_integrations": 3
  }
}
